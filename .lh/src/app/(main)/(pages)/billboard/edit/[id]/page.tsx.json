{
    "sourceFile": "src/app/(main)/(pages)/billboard/edit/[id]/page.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1745750573323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745757290510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n   };\r\n \r\n   return (\r\n     <>\r\n-      <BackButton text='Back To Posts' link='/posts' />\r\n+      <BackButton text='Back To Posts' link='/billboard' />\r\n       <h3 className='text-2xl mb-4'>Edit Post</h3>\r\n       <Form {...form}>\r\n         <form onSubmit={form.handleSubmit(handleSubmit)} className='space-y-8'>\r\n           <FormField\r\n"
                },
                {
                    "date": 1745758935771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,11 @@\n import { Textarea } from '@/components/ui/textarea';\r\n import { Button } from '@/components/ui/button';\r\n import posts from '@/data/posts';\r\n import { useToast } from '@/components/ui/use-toast';\r\n+import usePosts from '@/hooks/usePost';\r\n \r\n+const { updatePost } = usePosts();\r\n const formSchema = z.object({\r\n   title: z.string().min(1, {\r\n     message: 'Title is required',\r\n   }),\r\n@@ -53,15 +55,26 @@\n       date: post?.date || '',\r\n     },\r\n   });\r\n \r\n-  const handleSubmit = (data: z.infer<typeof formSchema>) => {\r\n-    toast({\r\n-      title: 'Post has been updated successfully',\r\n-      description: `Updated by ${post?.author} on ${post?.date}`,\r\n+  // const handleSubmit = (data: z.infer<typeof formSchema>) => {\r\n+  //   toast({\r\n+  //     title: 'Post has been updated successfully',\r\n+  //     description: `Updated by ${post?.author} on ${post?.date}`,\r\n+  //   });\r\n+  // };\r\n+  const handleSubmit = (data) => {\r\n+    if (!post) return;\r\n+  \r\n+    updatePost(post.id, {\r\n+      ...post,\r\n+      ...data,\r\n+      date: new Date().toISOString() // optional: update date to now\r\n     });\r\n+  \r\n+    toast({ title: 'Post updated successfully' });\r\n   };\r\n-\r\n+  \r\n   return (\r\n     <>\r\n       <BackButton text='Back To Posts' link='/billboard' />\r\n       <h3 className='text-2xl mb-4'>Edit Post</h3>\r\n"
                },
                {
                    "date": 1745759062603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n   }),\r\n   author: z.string().min(1, {\r\n     message: 'Author is required',\r\n   }),\r\n-  date: z.string().min(1, {\r\n-    message: 'Date is required',\r\n+  date: z.date().refine(date => !isNaN(date.getTime()), {\r\n+    message: 'Invalid date',\r\n   }),\r\n });\r\n \r\n interface PostEditPageProps {\r\n"
                },
                {
                    "date": 1745762843667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,9 @@\n import { Textarea } from '@/components/ui/textarea';\r\n import { Button } from '@/components/ui/button';\r\n import posts from '@/data/posts';\r\n import { useToast } from '@/components/ui/use-toast';\r\n-import usePosts from '@/hooks/usePost';\r\n \r\n-const { updatePost } = usePosts();\r\n const formSchema = z.object({\r\n   title: z.string().min(1, {\r\n     message: 'Title is required',\r\n   }),\r\n@@ -29,10 +27,10 @@\n   }),\r\n   author: z.string().min(1, {\r\n     message: 'Author is required',\r\n   }),\r\n-  date: z.date().refine(date => !isNaN(date.getTime()), {\r\n-    message: 'Invalid date',\r\n+  date: z.string().min(1, {\r\n+    message: 'Date is required',\r\n   }),\r\n });\r\n \r\n interface PostEditPageProps {\r\n@@ -55,29 +53,18 @@\n       date: post?.date || '',\r\n     },\r\n   });\r\n \r\n-  // const handleSubmit = (data: z.infer<typeof formSchema>) => {\r\n-  //   toast({\r\n-  //     title: 'Post has been updated successfully',\r\n-  //     description: `Updated by ${post?.author} on ${post?.date}`,\r\n-  //   });\r\n-  // };\r\n-  const handleSubmit = (data) => {\r\n-    if (!post) return;\r\n-  \r\n-    updatePost(post.id, {\r\n-      ...post,\r\n-      ...data,\r\n-      date: new Date().toISOString() // optional: update date to now\r\n+  const handleSubmit = (data: z.infer<typeof formSchema>) => {\r\n+    toast({\r\n+      title: 'Post has been updated successfully',\r\n+      description: `Updated by ${post?.author} on ${post?.date}`,\r\n     });\r\n-  \r\n-    toast({ title: 'Post updated successfully' });\r\n   };\r\n-  \r\n+\r\n   return (\r\n     <>\r\n-      <BackButton text='Back To Posts' link='/billboard' />\r\n+      <BackButton text='Back To Posts' link='/posts' />\r\n       <h3 className='text-2xl mb-4'>Edit Post</h3>\r\n       <Form {...form}>\r\n         <form onSubmit={form.handleSubmit(handleSubmit)} className='space-y-8'>\r\n           <FormField\r\n"
                },
                {
                    "date": 1745766175948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,22 +16,15 @@\n import { Textarea } from '@/components/ui/textarea';\r\n import { Button } from '@/components/ui/button';\r\n import posts from '@/data/posts';\r\n import { useToast } from '@/components/ui/use-toast';\r\n+import usePosts from '@/hooks/usePost';\r\n \r\n const formSchema = z.object({\r\n-  title: z.string().min(1, {\r\n-    message: 'Title is required',\r\n-  }),\r\n-  body: z.string().min(1, {\r\n-    message: 'Body is required',\r\n-  }),\r\n-  author: z.string().min(1, {\r\n-    message: 'Author is required',\r\n-  }),\r\n-  date: z.string().min(1, {\r\n-    message: 'Date is required',\r\n-  }),\r\n+  title: z.string().min(1, { message: 'Title is required' }),\r\n+  body: z.string().min(1, { message: 'Body is required' }),\r\n+  author: z.string().min(1, { message: 'Author is required' }),\r\n+  date: z.string().datetime({ message: 'Invalid date format' }),\r\n });\r\n \r\n interface PostEditPageProps {\r\n   params: {\r\n"
                },
                {
                    "date": 1745766921410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+'use client';\r\n+\r\n+import BackButton from '@/components/ui/backbutton';\r\n+import * as z from 'zod';\r\n+import { useForm } from 'react-hook-form';\r\n+import { zodResolver } from '@hookform/resolvers/zod';\r\n+import {\r\n+  Form,\r\n+  FormControl,\r\n+  FormField,\r\n+  FormItem,\r\n+  FormLabel,\r\n+  FormMessage,\r\n+} from '@/components/ui/form';\r\n+import { Input } from '@/components/ui/input';\r\n+import { Textarea } from '@/components/ui/textarea';\r\n+import { Button } from '@/components/ui/button';\r\n+import posts from '@/data/posts';\r\n+import { useToast } from '@/components/ui/use-toast';\r\n+// import usePosts from '@/hooks/usePost';\r\n+\r\n+const formSchema = z.object({\r\n+  title: z.string().min(1, { message: 'Title is required' }),\r\n+  body: z.string().min(1, { message: 'Body is required' }),\r\n+  author: z.string().min(1, { message: 'Author is required' }),\r\n+  date: z.string().datetime({ message: 'Invalid date format' }),\r\n+});\r\n+\r\n+interface PostEditPageProps {\r\n+  params: {\r\n+    id: string;\r\n+  };\r\n+}\r\n+\r\n+const PostEditPage = ({ params }: PostEditPageProps) => {\r\n+  const { toast } = useToast();\r\n+\r\n+  const post = posts.find((post) => post.id === params.id);\r\n+\r\n+  const form = useForm<z.infer<typeof formSchema>>({\r\n+    resolver: zodResolver(formSchema),\r\n+    defaultValues: {\r\n+      title: post?.title || '',\r\n+      body: post?.body || '',\r\n+      author: post?.author || '',\r\n+      date: post?.date || '',\r\n+    },\r\n+  });\r\n+\r\n+  const handleSubmit = (data: z.infer<typeof formSchema>) => {\r\n+    toast({\r\n+      title: 'Post has been updated successfully',\r\n+      description: `Updated by ${post?.author} on ${post?.date}`,\r\n+    });\r\n+  };\r\n+\r\n+  return (\r\n+    <>\r\n+      <BackButton text='Back To Posts' link='/billboard' />\r\n+      <h3 className='text-2xl mb-4'>Edit Post</h3>\r\n+      <Form {...form}>\r\n+        <form onSubmit={form.handleSubmit(handleSubmit)} className='space-y-8'>\r\n+          <FormField\r\n+            control={form.control}\r\n+            name='title'\r\n+            render={({ field }) => (\r\n+              <FormItem>\r\n+                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n+                  Title\r\n+                </FormLabel>\r\n+                <FormControl>\r\n+                  <Input\r\n+                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n+                    placeholder='Enter Title'\r\n+                    {...field}\r\n+                  />\r\n+                </FormControl>\r\n+                <FormMessage />\r\n+              </FormItem>\r\n+            )}\r\n+          />\r\n+\r\n+          <FormField\r\n+            control={form.control}\r\n+            name='body'\r\n+            render={({ field }) => (\r\n+              <FormItem>\r\n+                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n+                  Body\r\n+                </FormLabel>\r\n+                <FormControl>\r\n+                  <Textarea\r\n+                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n+                    placeholder='Enter Body'\r\n+                    {...field}\r\n+                  />\r\n+                </FormControl>\r\n+                <FormMessage />\r\n+              </FormItem>\r\n+            )}\r\n+          />\r\n+\r\n+          <FormField\r\n+            control={form.control}\r\n+            name='author'\r\n+            render={({ field }) => (\r\n+              <FormItem>\r\n+                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n+                  Author\r\n+                </FormLabel>\r\n+                <FormControl>\r\n+                  <Input\r\n+                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n+                    placeholder='Enter Author'\r\n+                    {...field}\r\n+                  />\r\n+                </FormControl>\r\n+                <FormMessage />\r\n+              </FormItem>\r\n+            )}\r\n+          />\r\n+\r\n+          <FormField\r\n+            control={form.control}\r\n+            name='date'\r\n+            render={({ field }) => (\r\n+              <FormItem>\r\n+                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n+                  Date\r\n+                </FormLabel>\r\n+                <FormControl>\r\n+                  <Input\r\n+                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n+                    placeholder='Enter Date'\r\n+                    {...field}\r\n+                  />\r\n+                </FormControl>\r\n+                <FormMessage />\r\n+              </FormItem>\r\n+            )}\r\n+          />\r\n+\r\n+          <Button className='w-full dark:bg-slate-800 dark:text-white'>\r\n+            Update Post\r\n+          </Button>\r\n+        </form>\r\n+      </Form>\r\n+    </>\r\n+  );\r\n+};\r\n+\r\n+export default PostEditPage;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1745750573323,
            "name": "Commit-0",
            "content": "'use client';\r\n\r\nimport BackButton from '@/components/ui/backbutton';\r\nimport * as z from 'zod';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Button } from '@/components/ui/button';\r\nimport posts from '@/data/posts';\r\nimport { useToast } from '@/components/ui/use-toast';\r\n\r\nconst formSchema = z.object({\r\n  title: z.string().min(1, {\r\n    message: 'Title is required',\r\n  }),\r\n  body: z.string().min(1, {\r\n    message: 'Body is required',\r\n  }),\r\n  author: z.string().min(1, {\r\n    message: 'Author is required',\r\n  }),\r\n  date: z.string().min(1, {\r\n    message: 'Date is required',\r\n  }),\r\n});\r\n\r\ninterface PostEditPageProps {\r\n  params: {\r\n    id: string;\r\n  };\r\n}\r\n\r\nconst PostEditPage = ({ params }: PostEditPageProps) => {\r\n  const { toast } = useToast();\r\n\r\n  const post = posts.find((post) => post.id === params.id);\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      title: post?.title || '',\r\n      body: post?.body || '',\r\n      author: post?.author || '',\r\n      date: post?.date || '',\r\n    },\r\n  });\r\n\r\n  const handleSubmit = (data: z.infer<typeof formSchema>) => {\r\n    toast({\r\n      title: 'Post has been updated successfully',\r\n      description: `Updated by ${post?.author} on ${post?.date}`,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BackButton text='Back To Posts' link='/posts' />\r\n      <h3 className='text-2xl mb-4'>Edit Post</h3>\r\n      <Form {...form}>\r\n        <form onSubmit={form.handleSubmit(handleSubmit)} className='space-y-8'>\r\n          <FormField\r\n            control={form.control}\r\n            name='title'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n                  Title\r\n                </FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n                    placeholder='Enter Title'\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name='body'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n                  Body\r\n                </FormLabel>\r\n                <FormControl>\r\n                  <Textarea\r\n                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n                    placeholder='Enter Body'\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name='author'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n                  Author\r\n                </FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n                    placeholder='Enter Author'\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <FormField\r\n            control={form.control}\r\n            name='date'\r\n            render={({ field }) => (\r\n              <FormItem>\r\n                <FormLabel className='uppercase text-xs font-bold text-zinc-500 dark:text-white'>\r\n                  Date\r\n                </FormLabel>\r\n                <FormControl>\r\n                  <Input\r\n                    className='bg-slate-100 dark:bg-slate-500 border-0 focus-visible:ring-0 text-black dark:text-white focus-visible:ring-offset-0'\r\n                    placeholder='Enter Date'\r\n                    {...field}\r\n                  />\r\n                </FormControl>\r\n                <FormMessage />\r\n              </FormItem>\r\n            )}\r\n          />\r\n\r\n          <Button className='w-full dark:bg-slate-800 dark:text-white'>\r\n            Update Post\r\n          </Button>\r\n        </form>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PostEditPage;"
        }
    ]
}